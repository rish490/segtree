class Lsegtree{
    vector<ll>tree;
    vector<ll>lazy;
    public:
    Lsegtree(vector<ll>&arr,ll n){
        tree.assign(4*n,0);
        lazy.assign(4*n,0);
        build(arr,0,n-1,0);
    }
    void build(vector<ll>&arr,ll l,ll r,ll node){
        if(l==r){
            tree[node]=arr[l];
            return;
        }
        if(l>r){
            return;
        }
        ll m=(l+r)>>1;
        build(arr,l,m,2*node+1);
        build(arr,m+1,r,2*node+2);
        tree[node]=tree[2*node+1]+tree[2*node+2];
    }
    void rangeupdate(ll node,ll l,ll r,ll low,ll high,ll val){
       // cout<<l<<" "<<r<<endl;
        if(l>r||l>high||r<low){
            return;
        }
        if(lazy[node]!=0){
            tree[node]+=(r-l+1)*lazy[node];
            if(l!=r){
                lazy[2*node+1]+=lazy[node];
                lazy[2*node+2]+=lazy[node];
            }
            lazy[node]=0;
        }
        if(l>=low&&r<=high){  //complete overlap 
        tree[node]+=(r-l+1)*val;
        if(l!=r){
            lazy[2*node+1]+=val;
            lazy[2*node+2]+=val;
        }
        return;
        }
        

        ll m=(l+r)>>1;
        rangeupdate(2*node+1,l,m,low,high,val);
        rangeupdate(2*node+2,m+1,r,low,high,val);
        tree[node]=tree[2*node+1]+tree[2*node+2];
        return;
    }
    ll getsum(ll node,ll l,ll r,ll low,ll high){
        if(l>r||l>high||r<low){
            return 0;
        }
        if(lazy[node]!=0){
            tree[node]+=(r-l+1)*lazy[node];
            if(l!=r){
                lazy[2*node+1]+=lazy[node];
                lazy[2*node+2]+=lazy[node];
            }
            lazy[node]=0;
        }
        if(low<=l&&r<=high){
            return tree[node];
        }
        
        ll m=(l+r)>>1;
        int ans=getsum(2*node+1,l,m,low,high)+getsum(2*node+2,m+1,r,low,high);
        tree[node]=tree[2*node+1]+tree[2*node+2];
        return ans;
    }
};
